USE SAKILA; 

-- Write SQL queries to perform the following tasks using the Sakila database:

-- List the number of films per category.

SELECT count(f.film_id) as number_of_film, c.name as category FROM film_category as f
LEFT JOIN category as c
on f.category_id = c.category_id
GROUP BY NAME;

-- Retrieve the store ID, city, and country for each store.

SELECT s.store_id, ci.city, co.country FROM store as s
INNER JOIN address as ad
on s.address_id = ad.address_id
INNER JOIN city as ci 
ON ad.city_id = ci.city_id
INNER JOIN country as co 
on ci.country_id = co.country_id;

-- Calculate the total revenue generated by each store in dollars.

SELECT s.store_id, sum(p.amount) as revenue FROM store as s 
INNER JOIN staff as st 
ON s.store_id = st.store_id
INNER JOIN payment as p 
on st.staff_id = p.staff_id
GROUP BY store_id;


-- Determine the average running time of films for each category.

SELECT ROUND(AVG(length), 2) as average_length, c.name as category FROM film_category as fc
INNER JOIN film as f
ON f.film_id = fc.film_id
LEFT JOIN category as c
on fc.category_id = c.category_id
GROUP BY NAME;

-- Bonus:

-- Display the top 10 most frequently rented movies in descending order.

SELECT f.rental_rate,f.title
FROM film as f
ORDER BY f.rental_rate DESC
LIMIT 10;

-- Determine if "Academy Dinosaur" can be rented from Store 1.

SELECT DISTINCT f.title, i.store_id from FILM as f
INNER JOIN inventory as i 
on f.film_id = i.film_id 
WHERE title = "Academy Dinosaur"; 

-- Provide a list of all distinct film titles, along with their availability status in the inventory. 
-- Include a column indicating whether each title is 'Available' or 'NOT available.' 
-- Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."

